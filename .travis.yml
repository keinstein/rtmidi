git:
  depth: 1
branches:
  except:
    - /(?i:appveyor)/
sudo: true  # docker VM
matrix:
  include:
  - os: linux
    env: HOST="" API="alsa" COVERAGE="--enable-code-coverage" CONFIGARGS="--enable-external-loopback-tests"
    compiler: gcc
  - os: linux
    env: HOST="" API="alsa" COVERAGE="" CONFIGARGS="--enable-external-loopback-tests"
    compiler: clang
  - os: linux
    env: HOST="" API="jack" COVERAGE="--enable-code-coverage" CONFIGARGS="--enable-external-loopback-tests"
    compiler: gcc
  - os: linux
    env: HOST="" API="jack" COVERAGE="" CONFIGARGS="--enable-external-loopback-tests"
    compiler: clang
  - os: linux
    env: HOST="" API="jack2" COVERAGE="--enable-code-coverage" CONFIGARGS="--enable-external-loopback-tests"
    compiler: gcc
  - os: linux
    env: HOST="" API="jack2" COVERAGE="" CONFIGARGS="--enable-external-loopback-tests"
    compiler: clang
  - os: linux
    env: HOST="--with-jack" API="alsa" COVERAGE="--enable-code-coverage"
    compiler: gcc
  - os: linux
    env: HOST="--with-jack" API="alsa"
    compiler: clang
  # - os: linux
  #   env: HOST="--host=i686-w64-mingw32" API="winmm"
  #  compiler: gcc
  # - os: linux
  #  env: HOST="--host=x86_64-w64-mingw32" API="winmm"
  #  compiler: gcc
  # jack and asound not found on ARM gnueabihf
  # - os: linux
  #   env: HOST="--host=arm-linux-gnueabihf" API="alsa"
  #   compiler: gcc
  # - os: linux
  #   env: HOST="--host=arm-linux-gnueabihf" API="jack"
  #   compiler: gcc
  - os: osx
    env: HOST="" API="coremidi" COVERAGE="--enable-code-coverage --enable-external-loopback-tests"
    compiler: gcc
  - os: osx
    env: HOST="" API="coremidi" COVERAGE=""
    compiler: clang
  - os: osx
    env: HOST="" API="jack" COVERAGE="--enable-code-coverage"
    compiler: gcc
  - os: osx
    env: HOST="" API="jack" COVERAGE=""
    compiler: clang
  - os: osx
    env: HOST="--with-jack" API="coremidi" COVERAGE="--enable-code-coverage"
    compiler: gcc
  - os: osx
    env: HOST="--with-jack" API="coremidi" COVERAGE=""
    compiler: clang
language: c++
group: travis_latest
env:
  global:
    - secure: "KCWTRyZJclzGmh011zSR7vS0hrK7Ibna0sowNLJ+TTS84Fc9delNX2LZJ63CoUAi8mmySRo0ffuSzMyp3cew5633cjRZLH/5HgxCPFMvcriGi3MqZw9tVVIpqhcsFcxyBzdaLvP7dE1NM1J1y5wLYQP5fOJF5910pxfEwqBOWUxiJAjQRG3DeRVxbNYDd6JwB+aI+LyMZm2ddz8eOKRYcPC35misFrhTPqCJcfzTF38qRQ6a7D9G+q//uPBNx7Ph2Bj52sndM/r1aeLA7kK+eeB1+gO/judbuJRNLAZpgCL/XdhnHzScWTu7/aDfIWkNZsR8tfZPeJIFbVASrymVU/B6oKw5+C2bWtn8PCuemRkTQ0KIUSt4hbMIT88wbAz56dBVR+3tFC5if87M7SOi9jqvXf13R5jjfnAbdtP/l9pucz3ja15MRCZacfNeY9JPFRfD0Tyd7ntt5aP+NSGFK8HRssVr82cvzezy1H39vWSzlm04mN53eCvS2aU7o3mSXpLRnr9UOrZs0wk6b3t8hGqH0Aw6eVlRdzCeUjYs17x71HETcuoUUjXKSZBhthxtyXUo1JtyLAwPLg7KlS1U+U2UxN+qkRGHb00MFRdM/mQElB15NSLZyUerymuE3Hr0eRtJBCuPmg9UByv2Wy06LNqNug8RCQVMuvxJuIoFZeE="

addons:
  apt:
    packages:
    - autoconf
    - libtool
    - autopoint
    - automake
    - lcov
    - jackd
    - libasound-dev
    - libjack-dev
    - libjack0
    - libcppunit-dev
    - doxygen
    - g++-mingw-w64-i686
    - g++-mingw-w64-x86-64
    - g++-arm-linux-gnueabihf
    - gdb


before_install:
    - |
      eval "${MATRIX_EVAL}"
      if test "$TRAVIS_OS_NAME" = osx
      then
        echo "Running on Mac OS X..."
        brew update
        if brew upgrade boost
        then
                echo "upgraded"
        else
                echo "nothing to be done"
        fi
        rm -rf /usr/local/include/c++ # fix broken gcc installation
        brew install $EXTRA_BREW  gettext flex bison libtool autoconf jack lcov  doxygen gdb
        brew link --force $EXTRA_BREW gettext flex bison libtool autoconf jack
      fi
      if test "$TRAVIS_OS_NAME" = linux
      then
        echo "Running on Linux..."
        sudo usermod -a -G audio $USER
        sudo usermod -a -G google-sudoers $USER
        sudo modprobe snd_seq_dummy
        lsmod | grep snd
        if test "$API" = jack2
        then
          sudo apt-get remove libjack-dev
          sudo apt-get install libjack-jackd2-dev
        fi
      fi
      mkdir -p config
      touch config/config.rpath

script:
    - |
      mkdir -p config
      touch config/config.rpath
      if test "$API" = jack2
      then
        API=jack
      fi
      ./autogen.sh --disable-apisearch "${COVERAGE}" ${CONFIGARGS} --with-$API $HOST 
    - make -j4
    - |
      if [ "$API" = "jack" ]
      then
        jackd -r -d dummy &
        JACKPID=$!
        echo $PWD
      fi
      env | sed -e "s,',\\',g;s,^,',g;s,\$,',g" > current_environment.sh
      if [ "$API" = "alsa" ]
      then
        echo "my groups $USER"
        groups "$USER"
        echo "my sudo groups"
        sudo su "$USER" -c groups || true
        ls -l /dev/snd
        sudo su "$USER" -c "PATH='$PATH' $TEST_RUNNER make check" || (cat test-suite.log ; exit 1)
        if test "x${COVERAGE}" = "x"
        then
          sudo su "$USER" -c "PATH='$PATH' make check" || true
        else
          sudo su "$USER" -c "PATH='$PATH' make check-code-coverage" || true
        fi
        echo "List midi devices"
        tests/midiprobe
        sudo su "$USER" -c "PATH='$PATH' make distcheck" || (find rtmidi* -name test-suite.log | xargs cat ; exit 1)
      else
        $TEST_RUNNER make check || (cat test-suite.log ; exit 1)
        if test "x${COVERAGE}" = "x"
        then
          make check || true
        else
          make check-code-coverage || true
        fi
        echo "List midi devices"
        tests/midiprobe
        make distcheck || (find rtmidi* -name test-suite.log | xargs cat ; exit 1)
      fi      
      cat tests/*.log
      if [ "API" = "jack" ]
      then
        kill $JACKPID
      fi

after_success:
    - bash <(curl -s https://codecov.io/bash)
